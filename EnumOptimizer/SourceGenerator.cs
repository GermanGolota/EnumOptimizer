using EnumOptimizer.Utils;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace EnumOptimizer
{
    [Generator]
    public class SourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new EnumSyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxReceiver is EnumSyntaxReceiver receiver)
            {
                var enums = receiver.Enums;
                var model = EnumsModelCollector.Collect(enums);
                string source = EnumClassCreator.Create(model);
                source = PrefixAsAutogenerated(source);
                context.AddSource("EnumExtensions.cs", source);
            }
        }

        private string PrefixAsAutogenerated(string source)
        {
            StringBuilder sourceBuilder = new StringBuilder();
            sourceBuilder.AppendLine("// <auto-generated/>");
            sourceBuilder.AppendLine();
            sourceBuilder.Append(source);
            return sourceBuilder.ToString();
        }
    }
}
